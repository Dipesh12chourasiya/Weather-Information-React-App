{"ast":null,"code":"import{createContext,useContext,useState}from\"react\";import{getWeatherDataForCity,getWeatherDataForLocation}from\"../api\";import{jsx as _jsx}from\"react/jsx-runtime\";const WeatherContext=/*#__PURE__*/createContext(null);export const useWeather=()=>{return useContext(WeatherContext);};export const WeatherProvider=props=>{const[data,setData]=useState(null);const[searchCity,setSearchCity]=useState(null);const fetchData=async()=>{const response=await getWeatherDataForCity(searchCity);setData(response);};const fetchCurrentUserLocationData=()=>{navigator.geolocation.getCurrentPosition(position=>{getWeatherDataForLocation(position.coords.latitude,position.coords.longitude).then(data=>setData(data));});};return/*#__PURE__*/_jsx(WeatherContext.Provider,{value:{searchCity,data,setSearchCity,fetchData,fetchCurrentUserLocationData},children:props.children});};","map":{"version":3,"names":["createContext","useContext","useState","getWeatherDataForCity","getWeatherDataForLocation","WeatherContext","useWeather","WeatherProvider","props","data","setData","searchCity","setSearchCity","fetchData","response","fetchCurrentUserLocationData","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","then","children"],"sources":["E:/React js/ReactJS-Weather-Application-main/ReactJS-Weather-Application-main/weather/src/context/Weather.jsx"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport { getWeatherDataForCity, getWeatherDataForLocation } from \"../api\";\nconst WeatherContext = createContext(null);\n\nexport const useWeather = () => {\n  return useContext(WeatherContext);\n};\n\nexport const WeatherProvider = (props) => {\n  const [data, setData] = useState(null);\n  const [searchCity, setSearchCity] = useState(null);\n\n  const fetchData = async () => {\n    const response = await getWeatherDataForCity(searchCity);\n    setData(response);\n  };\n\n  const fetchCurrentUserLocationData = () => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      getWeatherDataForLocation(\n        position.coords.latitude,\n        position.coords.longitude\n      ).then((data) => setData(data));\n    });\n  };\n\n  return (\n    <WeatherContext.Provider\n      value={{\n        searchCity,\n        data,\n        setSearchCity,\n        fetchData,\n        fetchCurrentUserLocationData,\n      }}\n    >\n      {props.children}\n    </WeatherContext.Provider>\n  );\n};\n"],"mappings":"AAAA,OAASA,aAAT,CAAwBC,UAAxB,CAAoCC,QAApC,KAAoD,OAApD,CACA,OAASC,qBAAT,CAAgCC,yBAAhC,KAAiE,QAAjE,C,2CACA,KAAMC,eAAc,cAAGL,aAAa,CAAC,IAAD,CAApC,CAEA,MAAO,MAAMM,WAAU,CAAG,IAAM,CAC9B,MAAOL,WAAU,CAACI,cAAD,CAAjB,CACD,CAFM,CAIP,MAAO,MAAME,gBAAe,CAAIC,KAAD,EAAW,CACxC,KAAM,CAACC,IAAD,CAAOC,OAAP,EAAkBR,QAAQ,CAAC,IAAD,CAAhC,CACA,KAAM,CAACS,UAAD,CAAaC,aAAb,EAA8BV,QAAQ,CAAC,IAAD,CAA5C,CAEA,KAAMW,UAAS,CAAG,SAAY,CAC5B,KAAMC,SAAQ,CAAG,KAAMX,sBAAqB,CAACQ,UAAD,CAA5C,CACAD,OAAO,CAACI,QAAD,CAAP,CACD,CAHD,CAKA,KAAMC,6BAA4B,CAAG,IAAM,CACzCC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,EAAc,CACrDf,yBAAyB,CACvBe,QAAQ,CAACC,MAAT,CAAgBC,QADO,CAEvBF,QAAQ,CAACC,MAAT,CAAgBE,SAFO,CAAzB,CAGEC,IAHF,CAGQd,IAAD,EAAUC,OAAO,CAACD,IAAD,CAHxB,EAID,CALD,EAMD,CAPD,CASA,mBACE,KAAC,cAAD,CAAgB,QAAhB,EACE,KAAK,CAAE,CACLE,UADK,CAELF,IAFK,CAGLG,aAHK,CAILC,SAJK,CAKLE,4BALK,CADT,UASGP,KAAK,CAACgB,QATT,EADF,CAaD,CA/BM"},"metadata":{},"sourceType":"module"}